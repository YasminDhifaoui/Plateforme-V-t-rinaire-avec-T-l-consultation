import 'dart:async';
import 'dart:io'; // Import for Platform check
import 'dart:convert'; // Import for jsonEncode/decode

import 'package:client_app/services/notification_services/fcm_token_api_service.dart';
import 'package:client_app/views/Auth_pages/client_login_page.dart';
import 'package:client_app/views/chat_pages/ChatPage.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:signalr_core/signalr_core.dart';
import 'package:client_app/services/auth_services/token_service.dart';
import 'package:client_app/services/video_call_services/signalr_tc_service.dart';
import 'package:client_app/utils/app_colors.dart'; // Correct import for colors
import 'package:client_app/views/Auth_pages/client_register_page.dart';
import 'package:client_app/views/home_page.dart'; // Your actual HomePage (dashboard)
import 'package:client_app/views/video_call_pages/incoming_call_screen.dart';

import 'firebase_options.dart'; // This file is generated by `flutterfire configure`


final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();

final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
FlutterLocalNotificationsPlugin();

// --- Top-level function to handle background messages ---
// This function must not be an anonymous function and must not be a method
// of a class. It can be used as a callback to FirebaseMessaging.onBackgroundMessage.
@pragma('vm:entry-point') // Required for background message handling
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  // If you're going to use other Firebase services in your background handler,
  // make sure to initialize the app before using them.
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  print('Handling a background message: ${message.messageId}');
  print('Message data: ${message.data}');
  print('Message notification title: ${message.notification?.title}');
  print('Message notification body: ${message.notification?.body}');

  // You can show a local notification for background/terminated messages here
  // For example, if you want the user to see the notification even when app is terminated/backgrounded
  if (message.notification != null) {
    flutterLocalNotificationsPlugin.show(
      message.notification.hashCode, // Unique ID for the notification
      message.notification?.title,
      message.notification?.body,
      NotificationDetails(
        android: AndroidNotificationDetails(
          'high_importance_channel_client', // Must match the channel ID from main() and AndroidManifest.xml
          'Client Important Notifications',
          channelDescription: 'This channel is used for important notifications.',
          importance: Importance.max,
        ),
        iOS: const DarwinNotificationDetails(), // Use default iOS details
      ),
      payload: jsonEncode(message.data), // Pass the full data payload as a JSON string
    );
  }
}
// --- End Top-level function ---

// --- CORRECTED: Top-level function for navigation (Client App) ---
// This function needs to be outside any class or a static method to be called by FCM handlers.
Future<void> handleFCMNavigation(Map<String, dynamic> data) async {
  final String? notificationType = data['type'] as String?;

  print('[Client FCM Navigation Handler] Processing navigation for type: $notificationType. Data: $data');

  // Fetch current user details as they are needed for navigation after login
  final String? currentClientToken = await TokenService.getToken();
  final String? currentClientId = await TokenService.getUserId();
  final String? currentClientUsername = await TokenService.getUsername();

  if (currentClientToken == null || currentClientId == null || currentClientUsername == null) {
    print('[Client FCM Navigation Handler] Client not fully logged in. Cannot navigate to specific pages. Redirecting to login.');
    if (navigatorKey.currentState != null) {
      // Ensure we clear the stack and go to login
      if (navigatorKey.currentState!.canPop()) {
        navigatorKey.currentState!.popUntil((route) => route.isFirst);
      }
      navigatorKey.currentState!.pushReplacement(MaterialPageRoute(builder: (context) => const ClientLoginPage()));
    }
    return;
  }

  if (navigatorKey.currentState?.context == null) {
    print('[Client FCM Navigation Handler] Navigator context is null, cannot navigate.');
    return;
  }

  // --- Specific navigation logic for client app ---
  if (notificationType == 'chat_message') {
    final String? senderId = data['sender_id'] as String?; // This will be the vet's ID
    final String? senderName = data['sender_name'] as String?; // This will be the vet's username
    final String? messageContent = data['message_content'] as String?;
    final String? fileUrl = data['file_url'] as String?;
    final String? fileName = data['file_name'] as String?;
    final String? fileType = data['file_type'] as String?;


    if (senderId != null && senderName != null && messageContent != null) {
      print('[Client FCM Navigation Handler] New chat message from Vet: $senderName ($senderId) - "$messageContent"');
      // Navigate to the ChatPage for the client, passing the vet's details as the receiver
      // Check if the current route is already ChatPage with the same sender to avoid stacking
      bool isOnChatPageWithSender = false;
      navigatorKey.currentState?.popUntil((route) {
        if (route.settings.name == '/chat_page_client' && route.settings.arguments != null) {
          final args = route.settings.arguments as Map<String, dynamic>;
          if (args['receiverId'] == senderId) {
            isOnChatPageWithSender = true;
          }
        }
        return true; // Keep popping until root or this screen found
      });

      if (!isOnChatPageWithSender) {
        navigatorKey.currentState!.push(
          MaterialPageRoute(
            builder: (context) => ChatPage(
              token: currentClientToken!, // Pass the client's own token
              receiverId: senderId, // The sender (vet) from FCM is the receiver for client's chat
              receiverUsername: senderName,
            ),
            settings: RouteSettings(
              name: '/chat_page_client',
              arguments: {'receiverId': senderId}, // Pass arguments for route comparison
            ),
          ),
        );
      } else {
        print('[Client FCM Navigation Handler] Already on chat page with this sender. Not pushing again.');
      }
    } else {
      print('[Client FCM Navigation Handler] Chat message data is incomplete.');
    }
  } else if (notificationType == 'vet_profile_update') {
    final String? vetId = data['vet_id'] as String?;
    print('[Client FCM Navigation Handler] Vet profile update notification for ID: $vetId');
    // Example: Navigate to a vet profile details page
    // navigatorKey.currentState!.push(
    //   MaterialPageRoute(builder: (context) => VetProfileDetailsPage(vetId: vetId!)),
    // );
  } else {
    print('[Client FCM Navigation Handler] Received unknown notification type: $notificationType. Full data: $data');
  }
}
// --- End Top-level function for navigation (Client App) ---


void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // --- FCM INTEGRATION START (Client App) ---

  // 1. Initialize Firebase App (must be called before any Firebase service)
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);

  // 2. Register the top-level background message handler
  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);

  // 3. Configure flutter_local_notifications for Android (notification channels)
  // This is required for Android 8.0+ to show notifications.
  if (Platform.isAndroid) {
    const AndroidNotificationChannel channel = AndroidNotificationChannel(
      'high_importance_channel_client', // UNIQUE ID for client app channel (must match AndroidManifest.xml)
      'Client Important Notifications',
      description: 'This channel is used for important notifications.',
      importance: Importance.max,
    );

    await flutterLocalNotificationsPlugin
        .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>()
        ?.createNotificationChannel(channel);
  }

  // 4. Initialize flutter_local_notifications (for displaying foreground messages)
  final DarwinInitializationSettings initializationSettingsDarwin =
  DarwinInitializationSettings(
    onDidReceiveLocalNotification: (id, title, body, payload) {
      // Handle foreground notifications on older iOS versions (deprecated in newer iOS)
      print('iOS Local Notification (deprecated): $title, $body, $payload');
    },
  );
  final InitializationSettings initializationSettings = InitializationSettings(
    android: const AndroidInitializationSettings('@mipmap/ic_launcher'), // Your app icon
    iOS: initializationSettingsDarwin,
  );
  await flutterLocalNotificationsPlugin.initialize(
    initializationSettings,
    onDidReceiveNotificationResponse: (NotificationResponse response) async {
      // This callback is triggered when a notification is tapped
      // (local or FCM-triggered local notification)
      print('[Client Local Notification] Tapped: ${response.payload}');
      if (response.payload != null && response.payload!.isNotEmpty) {
        try {
          final Map<String, dynamic> data = jsonDecode(response.payload!);
          handleFCMNavigation(data); // CORRECTED call to public function
        } catch (e) {
          print('[Client Local Notification] Error decoding local notification payload: $e');
        }
      } else {
        print('[Client Local Notification] Tapped with empty payload.');
      }
    },
  );

  // 5. Request notification permissions (important for iOS and Android 13+)
  FirebaseMessaging messaging = FirebaseMessaging.instance;
  NotificationSettings settings = await messaging.requestPermission(
    alert: true,
    announcement: false,
    badge: true,
    carPlay: false,
    criticalAlert: false,
    provisional: false,
    sound: true,
  );
  print('[Client App] User granted notification permission: ${settings.authorizationStatus}');

  // 6. Get the FCM token (send this to your backend)
  String? fcmToken = await messaging.getToken();
  print('[Client App] FCM Token: $fcmToken');

  // --- NEW: Save FCM token if user is already logged in at app startup ---
  String? storedUserIdAtStartup = await TokenService.getUserId();
  if (fcmToken != null && storedUserIdAtStartup != null && storedUserIdAtStartup.isNotEmpty) {
    await FcmTokenApiService.saveUserFcmToken(storedUserIdAtStartup, fcmToken, 'client');
    print('[Client App] FCM token sent to backend for already logged-in user $storedUserIdAtStartup on startup.');
  } else {
    print('[Client App] FCM token not sent on startup (not logged in or token/userId missing).');
  }
  // --- END NEW BLOCK ---


  // --- Existing Login Logic Below ---
  String? storedToken = await TokenService.getToken();
  String? storedUserId = await TokenService.getUserId();
  String? storedUsername = await TokenService.getUsername();

  final bool isLoggedIn = storedToken != null && storedUserId != null && storedUsername != null;
  print('[Client main.dart] User is logged in: $isLoggedIn');
  print('[Client main.dart] stored token: $storedToken');
  print('[Client main.dart] stored id: $storedUserId');
  print('[Client main.dart] stored username: $storedUsername');

  runApp(MyApp(
    isLoggedIn: isLoggedIn,
    initialToken: storedToken,
    initialUserId: storedUserId,
    initialUsername: storedUsername,
  ));
}

class MyApp extends StatelessWidget {
  final bool isLoggedIn;
  final String? initialToken;
  final String? initialUserId;
  final String? initialUsername;

  const MyApp({
    super.key,
    required this.isLoggedIn,
    this.initialToken,
    this.initialUserId,
    this.initialUsername,
  });

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      navigatorKey: navigatorKey,
      title: 'Veterinary Services : A Step Towards Digital Pet Healthcare. All rights reserved.',
      theme: ThemeData(
        primaryColor: kPrimaryBlue,
        colorScheme: ColorScheme.fromSeed(
          seedColor: kPrimaryBlue,
          primary: kPrimaryBlue,
          secondary: kAccentBlue,
          surface: Colors.white,
          onSurface: Colors.black87,
          background: Colors.grey.shade50,
        ),
        useMaterial3: true,
        scaffoldBackgroundColor: Colors.grey.shade50,
        appBarTheme: const AppBarTheme(
          backgroundColor: kPrimaryBlue,
          foregroundColor: Colors.white,
          elevation: 0,
          centerTitle: true,
        ),
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            backgroundColor: kPrimaryBlue,
            foregroundColor: Colors.white,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
            padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 14),
            textStyle: const TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.w600,
            ),
            elevation: 4,
          ),
        ),
        textButtonTheme: TextButtonThemeData(
          style: TextButton.styleFrom(
            foregroundColor: kPrimaryBlue,
          ),
        ),
        cardTheme: const CardThemeData(
          elevation: 6,
          shape: RoundedRectangleBorder(),
          color: Colors.white,
        ),
        inputDecorationTheme: InputDecorationTheme(
          labelStyle: const TextStyle(color: kPrimaryBlue),
          prefixIconColor: kAccentBlue,
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(10),
            borderSide: BorderSide(color: kPrimaryBlue.withOpacity(0.6)),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(10),
            borderSide: const BorderSide(color: kPrimaryBlue, width: 2),
          ),
          filled: true,
          fillColor: Colors.white,
        ),
        textTheme: const TextTheme(
          headlineLarge: TextStyle(color: Colors.black87),
          headlineMedium: TextStyle(color: Colors.black87),
          headlineSmall: TextStyle(color: Colors.black87),
          titleLarge: TextStyle(color: Colors.black87),
          titleMedium: TextStyle(color: Colors.black87),
          titleSmall: TextStyle(color: Colors.black87),
          bodyLarge: TextStyle(color: Colors.black87),
          bodyMedium: TextStyle(color: Colors.black87),
          bodySmall: TextStyle(color: Colors.black54),
          labelLarge: TextStyle(color: Colors.white),
          labelMedium: TextStyle(color: Colors.black87),
          labelSmall: TextStyle(color: Colors.black54),
        ).apply(
          bodyColor: Colors.black87,
          displayColor: Colors.black87,
        ),
      ),
      home: isLoggedIn
          ? HomePage(
        token: initialToken!,
        username: initialUsername!,
        initialUserId: initialUserId!, // HomePage needs initialUserId
      )
          : MyHomePage(
        title: 'Veterinary Services : A Step Towards Digital Pet Healthcare. All rights reserved.',
        // MODIFIED: onLoginSuccessCallback signature now correctly passes userId and username
        onLoginSuccessCallback: (token, userId, username) async {
          print('[Client main.dart] Login Success Callback - Received Token: $token, User ID: $userId, Username: $username');

          String? freshFcmToken = await FirebaseMessaging.instance.getToken();
          if (freshFcmToken != null && userId.isNotEmpty) {
            await FcmTokenApiService.saveUserFcmToken(userId, freshFcmToken, 'client'); // Indicate this is a 'client' app token
            print('FCM token sent to backend from client app for user $userId.');
          } else {
            print('FCM token is null or userId is empty for client app. Cannot send FCM token to backend.');
          }

          // Push to Home page
          navigatorKey.currentState?.pushReplacement(
            MaterialPageRoute(
              builder: (context) => HomePage( // Assuming HomePage is the main landing page
                token: token,
                username: username,
                initialUserId: userId, // HomePage needs initialUserId
              ),
            ),
          );
        },
      ),
      routes: {
        '/login': (context) => const ClientLoginPage(),
        '/register': (context) => const ClientRegisterPage(), // Corrected to ClientRegisterPage
        '/chat_page_client': (context) => ChatPage( // Add named route for client chat page
          token: '', // Token will be fetched internally by ChatPage
          receiverId: '', // These will be passed via arguments or constructor
          receiverUsername: '',
        ),
      },
    );
  }
}

class AppWrapper extends StatefulWidget {
  final String initialToken;
  final String initialUsername;
  final String initialUserId;

  const AppWrapper({
    super.key,
    required this.initialToken,
    required this.initialUsername,
    required this.initialUserId,
  });

  @override
  State<AppWrapper> createState() => _AppWrapperState();
}

class _AppWrapperState extends State<AppWrapper> with WidgetsBindingObserver {
  StreamSubscription? _incomingCallSubscription;

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
    // Initialize SignalR if the client app also uses SignalR
    initSignalRAndListenGlobally(widget.initialToken);
  }

  // If the client app uses SignalR for calls, keep this. Otherwise, consider removing.
  void initSignalRAndListenGlobally(String token) async {
    print('[AppWrapper.initSignalRAndListenGlobally] Attempting to initialize SignalR.');
    if (token.isEmpty) {
      print('[AppWrapper.initSignalRAndListenGlobally] WARNING: Token is empty. Cannot initialize SignalRTCService.');
      return;
    }

    try {
      if (SignalRTCService.connection != null && SignalRTCService.connection!.state == HubConnectionState.connected) {
        print('[AppWrapper.initSignalRAndListenGlobally] SignalRTCService already connected. State: ${SignalRTCService.connection?.state}. Skipping re-initialization.');
      } else {
        await SignalRTCService.init(token);
        print('[AppWrapper.initSignalRAndListenGlobally] SignalRTCService.init completed successfully.');
      }

      _incomingCallSubscription?.cancel();
      _incomingCallSubscription = SignalRTCService.incomingCallStream.listen(
            (callerId) {
          print('[AppWrapper.initSignalRAndListenGlobally] Incoming call detected from: $callerId');
          _navigateToIncomingCallScreen(callerId);
        },
        onError: (error) {
          print('[AppWrapper.initSignalRAndListenGlobally] Error on incomingCallStream: $error');
        },
        onDone: () {
          print('[AppWrapper.initSignalRAndListenGlobally] incomingCallStream done.');
        },
      );
      print('[AppWrapper.initSignalRAndListenGlobally] Incoming call stream listener set up.');
    } catch (e) {
      print('[AppWrapper.initSignalRAndListenGlobally] ERROR during SignalRTCService initialization or stream setup: $e');
    }
  }

  void _navigateToIncomingCallScreen(String callerId) {
    bool isIncomingCallScreenActive = false;
    navigatorKey.currentState?.popUntil((route) {
      if (route.settings.name == '/incoming_call_screen') {
        isIncomingCallScreenActive = true;
      }
      return true;
    });

    if (!isIncomingCallScreenActive && navigatorKey.currentState != null) {
      print('[AppWrapper._navigateToIncomingCallScreen] Pushing IncomingCallScreen for $callerId.');
      navigatorKey.currentState!.push(
        MaterialPageRoute(
          builder: (context) => IncomingCallScreen(
            callerId: callerId,
            callerName: callerId, // Assuming callerId is also the name for now
          ),
          settings: const RouteSettings(name: '/incoming_call_screen'),
        ),
      );
    } else {
      print('[AppWrapper._navigateToIncomingCallScreen] IncomingCallScreen is already active or navigator is null. Not pushing again.');
    }
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    print('[AppWrapper.didChangeAppLifecycleState] App lifecycle state changed to: $state');
    if (state == AppLifecycleState.resumed) {
      initSignalRAndListenGlobally(widget.initialToken);
    } else if (state == AppLifecycleState.paused || state == AppLifecycleState.inactive) {
      // SignalRTCService.disconnect(); // Uncomment if you want to disconnect on pause
    }
  }

  @override
  void dispose() {
    print('[AppWrapper] dispose: Cleaning up SignalR listener and connection.');
    WidgetsBinding.instance.removeObserver(this);
    _incomingCallSubscription?.cancel();
    SignalRTCService.disconnect();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    // AppWrapper now renders the HomePage if logged in
    return HomePage(
      username: widget.initialUsername, // Pass the display username
      token: widget.initialToken,
      initialUserId: widget.initialUserId,
    );
  }
}

class MyHomePage extends StatelessWidget {
  const MyHomePage({super.key, required this.title, this.onLoginSuccessCallback});

  final String title;
  final Function(String token, String userId, String username)? onLoginSuccessCallback;

  @override
  Widget build(BuildContext context) {
    final TextTheme textTheme = Theme.of(context).textTheme;

    return Scaffold(
      appBar: AppBar(
        title: Text(title, style: textTheme.titleLarge?.copyWith(color: Colors.white)),
        centerTitle: true,
        backgroundColor: kPrimaryBlue,
        elevation: 0,
      ),
      body: SingleChildScrollView(
        child: Column(
          children: [
            Container(
              width: double.infinity,
              padding: const EdgeInsets.symmetric(vertical: 60, horizontal: 24),
              decoration: BoxDecoration( // Changed to BoxDecoration so color can be used with opacity
                color: kPrimaryBlue.withOpacity(0.15), // Example with opacity for a lighter background
                borderRadius: const BorderRadius.vertical(bottom: Radius.circular(30)),
                boxShadow: const [
                  BoxShadow(
                    color: Colors.black12,
                    blurRadius: 10,
                    offset: Offset(0, 5),
                  ),
                ],
              ),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text(
                    'Your Pet\'s Health, Our Priority',
                    textAlign: TextAlign.center,
                    style: textTheme.headlineLarge?.copyWith(
                      color: kPrimaryBlue, // Using kPrimaryBlue for headline
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 16),
                  Text(
                    'Connecting you with trusted veterinarians for compassionate pet care, anytime, anywhere.',
                    textAlign: TextAlign.center,
                    style: textTheme.bodyLarge?.copyWith(
                      color: Colors.black87, // Using black87 for body text
                    ),
                  ),
                  const SizedBox(height: 32),
                  ElevatedButton(
                    onPressed: () {
                      // Navigate to client login page, passing the callback
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => ClientLoginPage(
                            // Pass the callback from MyHomePage (which expects 3 args)
                            // to ClientLoginPage, which also expects 3 args
                            onLoginSuccessCallback: onLoginSuccessCallback,
                          ),
                        ),
                      );
                      print('Get Started button pressed, navigating to login.');
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: kAccentBlue,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(horizontal: 40, vertical: 16),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(10),
                      ),
                      elevation: 5,
                    ),
                    child: Text(
                      'Get Started',
                      style: textTheme.labelLarge?.copyWith(fontSize: 18),
                    ),
                  ),
                ],
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(24.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Our Core Services',
                    style: textTheme.headlineSmall?.copyWith(color: Colors.black87),
                  ),
                  const SizedBox(height: 24),
                  GridView.count(
                    crossAxisCount: 2,
                    shrinkWrap: true,
                    physics: const NeverScrollableScrollPhysics(),
                    mainAxisSpacing: 16,
                    crossAxisSpacing: 16,
                    childAspectRatio: 0.9,
                    children: [
                      _serviceCard(
                        context,
                        Icons.local_hospital_rounded,
                        'Quick Vet Access',
                        'Connect with licensed veterinarians instantly via video call.',
                        kAccentBlue,
                      ),
                      _serviceCard(
                        context,
                        Icons.calendar_month_rounded,
                        'Online Appointments',
                        'Schedule consultations at your convenience, 24/7.',
                        Colors.orange.shade400,
                      ),
                      _serviceCard(
                        context,
                        Icons.chat_bubble_rounded,
                        'Direct Vet Chat',
                        'Get immediate answers and advice through direct messaging.',
                        Colors.teal.shade400,
                      ),
                      _serviceCard(
                        context,
                        Icons.medical_services_rounded,
                        'Specialized Care',
                        'Access a network of specialists for unique pet needs.',
                        kPrimaryBlue,
                      ),
                    ],
                  ),
                ],
              ),
            ),
            Container(
              width: double.infinity,
              padding: const EdgeInsets.symmetric(vertical: 40, horizontal: 24),
              color: kLightGreyBackground,
              child: Column(
                children: [
                  Text(
                    'Ready to give your pet the best care?',
                    textAlign: TextAlign.center,
                    style: textTheme.headlineSmall?.copyWith(color: Colors.black87),
                  ),
                  const SizedBox(height: 20),
                  OutlinedButton(
                    onPressed: () {
                      // Navigate to registration page
                      Navigator.push(context, MaterialPageRoute(builder: (context) => const ClientRegisterPage()));
                      print('Register now button pressed, navigating to register.');
                    },
                    child: Text(
                      'Register Now',
                      style: textTheme.labelLarge?.copyWith(color: kPrimaryBlue),
                    ),
                  ),
                  const SizedBox(height: 10),
                  TextButton(
                    onPressed: () {
                      // Navigate to login page, passing the callback
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => ClientLoginPage(
                            // Pass the callback from MyHomePage (which expects 3 args)
                            // to ClientLoginPage, which also expects 3 args
                            onLoginSuccessCallback: onLoginSuccessCallback,
                          ),
                        ),
                      );
                      print('Already have an account? Login button pressed, navigating to login.');
                    },
                    child: Text(
                      'Already have an account? Login',
                      style: textTheme.bodyMedium?.copyWith(color: kPrimaryBlue),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _serviceCard(
      BuildContext context,
      IconData icon,
      String title,
      String description,
      Color iconColor,
      ) {
    final TextTheme textTheme = Theme.of(context).textTheme;
    return Card(
      elevation: 4,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
      margin: EdgeInsets.zero,
      child: InkWell(
        onTap: () {
          print('$title service tapped!');
        },
        borderRadius: BorderRadius.circular(15),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: iconColor.withOpacity(0.15),
                  shape: BoxShape.circle,
                ),
                child: Icon(
                  icon,
                  size: 40,
                  color: iconColor,
                ),
              ),
              const SizedBox(height: 12),
              Text(
                title,
                textAlign: TextAlign.center,
                style: textTheme.titleMedium?.copyWith(fontWeight: FontWeight.bold),
                maxLines: 2,
                overflow: TextOverflow.ellipsis,
              ),
              const SizedBox(height: 8),
              Expanded(
                child: Text(
                  description,
                  textAlign: TextAlign.center,
                  style: textTheme.bodySmall,
                  maxLines: 3,
                  overflow: TextOverflow.ellipsis,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}