import 'dart:async';
import 'dart:io'; // Import for Platform check
import 'dart:convert'; // Import for jsonEncode/decode

import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:signalr_core/signalr_core.dart';
import 'package:veterinary_app/services/auth_services/token_service.dart';
import 'package:veterinary_app/services/notification_services/fcm_token_api_service.dart';
import 'package:veterinary_app/services/video_call_services/signalr_tc_service.dart';
import 'package:veterinary_app/utils/app_colors.dart';
import 'package:veterinary_app/views/chat_pages/ChatPage.dart';
import 'package:veterinary_app/views/home_page.dart'; // Your actual HomePage (dashboard)
import 'package:veterinary_app/views/video_call_pages/incoming_call_screen.dart';
import 'package:veterinary_app/views/Auth_pages/vet_login_page.dart'; // Your login screen
import 'package:veterinary_app/views/Auth_pages/vet_register_page.dart'; // Your register screen

// Import Firebase packages
import 'firebase_options.dart'; // Ensure this file is generated by `flutterfire configure`

final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();

final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
FlutterLocalNotificationsPlugin();

// --- Top-level function to handle background messages ---
@pragma('vm:entry-point') // Required for background message handling
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  print('[FCM Background] Handling message: ${message.messageId}');
  print('[FCM Background] Data: ${message.data}');
  print('[FCM Background] Notification Title: ${message.notification?.title}');
  print('[FCM Background] Notification Body: ${message.notification?.body}');

  // Determine title and body for the local notification consistently
  String title = message.notification?.title ?? 'New Notification';
  String body = message.notification?.body ?? 'You have an update.';

  if (message.data['type'] == 'chat_message') {
    title = message.data['sender_name'] ?? 'New Chat Message';
    body = message.data['message_content'] ?? 'You received a message.';
  } else if (message.data['type'] == 'incoming_call') {
    title = 'Incoming Call';
    body = 'Call from ${message.data['caller_name'] ?? 'Unknown'}';
  }


  print('[FCM Background Display] Showing notification: Title=$title, Body=$body');
  flutterLocalNotificationsPlugin.show(
    message.notification.hashCode, // Unique ID for notification (can use a constant or timestamp too)
    title,
    body,
    NotificationDetails(
      android: AndroidNotificationDetails(
        'high_importance_channel', // Must match ID from AndroidManifest.xml and main()
        'High Importance Notifications',
        channelDescription: 'This channel is used for important notifications.',
        importance: Importance.max,
        priority: Priority.high,
        icon: '@mipmap/ic_launcher',
        visibility: NotificationVisibility.public,
      ),
      iOS: const DarwinNotificationDetails(),
    ),
    payload: jsonEncode(message.data), // Pass the full data payload as a JSON string
  );
}
// --- End Top-level function ---

// --- Function for navigation, now a public top-level function ---
Future<void> handleFCMNavigation(Map<String, dynamic> data) async {
  final String? notificationType = data['type'] as String?;

  print('[FCM Navigation Handler] Processing navigation for type: $notificationType. Data: $data');

  final String? currentVetToken = await TokenService.getToken();
  final String? currentVetId = await TokenService.getUserId();
  final String? currentVetUsername = await TokenService.getUsername();

  if (currentVetToken == null || currentVetId == null || currentVetUsername == null) {
    print('[FCM Navigation Handler] Vet not fully logged in. Cannot navigate to specific pages. Redirecting to login.');
    if (navigatorKey.currentState != null) {
      if (navigatorKey.currentState!.canPop()) {
        navigatorKey.currentState!.popUntil((route) => route.isFirst);
      }
      navigatorKey.currentState!.pushReplacement(MaterialPageRoute(builder: (context) => const VetLoginPage()));
    }
    return;
  }

  if (navigatorKey.currentState?.context == null) {
    print('[FCM Navigation Handler] Navigator context is null, cannot navigate.');
    return;
  }

  if (notificationType == 'incoming_call') {
    final String? callerId = data['caller_id'] as String?;
    final String? callerName = data['caller_name'] as String?;

    if (callerId != null && callerName != null) {
      print('[FCM Navigation Handler] Incoming call from: $callerName ($callerId)');
      bool isIncomingCallScreenActive = false;
      navigatorKey.currentState?.popUntil((route) {
        if (route.settings.name == '/incoming_call_screen') {
          isIncomingCallScreenActive = true;
        }
        return true;
      });

      if (!isIncomingCallScreenActive) {
        navigatorKey.currentState!.push(
          MaterialPageRoute(
            builder: (context) => IncomingCallScreen(
              callerId: callerId,
              callerName: callerName,
            ),
            settings: const RouteSettings(name: '/incoming_call_screen'),
          ),
        );
      } else {
        print('[FCM Navigation Handler] IncomingCallScreen is already active. Not pushing again.');
      }
    } else {
      print('[FCM Navigation Handler] Incoming call data is incomplete.');
    }
  } else if (notificationType == 'chat_message') {
    final String? senderId = data['sender_id'] as String?;
    final String? senderName = data['sender_name'] as String?;
    final String? messageContent = data['message_content'] as String?;
    final String? fileUrl = data['file_url'] as String?;
    final String? fileName = data['file_name'] as String?;
    final String? fileType = data['file_type'] as String?;

    if (senderId != null && senderName != null && messageContent != null) {
      print('[FCM Navigation Handler] New chat message from: $senderName ($senderId) - "$messageContent"');
      bool isOnChatPageWithSender = false;
      navigatorKey.currentState?.popUntil((route) {
        if (route.settings.name == '/chat_page' && route.settings.arguments != null) {
          final args = route.settings.arguments as Map<String, dynamic>;
          if (args['receiverId'] == senderId) {
            isOnChatPageWithSender = true;
          }
        }
        return true;
      });

      if (!isOnChatPageWithSender) {
        navigatorKey.currentState!.push(
          MaterialPageRoute(
            builder: (context) => ChatPage(
              token: currentVetToken!,
              receiverId: senderId,
              receiverUsername: senderName,
            ),
            settings: RouteSettings(
              name: '/chat_page',
              arguments: {'receiverId': senderId},
            ),
          ),
        );
      } else {
        print('[FCM Navigation Handler] Already on chat page with this sender. Not pushing again.');
      }
    } else {
      print('[FCM Navigation Handler] Chat message data is incomplete.');
    }
  } else {
    print('[FCM Navigation Handler] Received unknown notification type: $notificationType. Full data: $data');
  }
}

// --- MAIN FUNCTION ---
void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // --- FCM INTEGRATION START ---
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);

  // 3. Configure flutter_local_notifications for Android (notification channels)
  if (Platform.isAndroid) {
    const AndroidNotificationChannel channel = AndroidNotificationChannel(
      'high_importance_channel',
      'High Importance Notifications',
      description: 'This channel is used for important notifications.',
      importance: Importance.max,
      //priority: Priority.high,
      //icon: '@mipmap/ic_launcher',
    );
    await flutterLocalNotificationsPlugin
        .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>()
        ?.createNotificationChannel(channel);
  }

  // 4. Initialize flutter_local_notifications (for displaying foreground messages)
  final DarwinInitializationSettings initializationSettingsDarwin =
  DarwinInitializationSettings(
    onDidReceiveLocalNotification: (id, title, body, payload) {
      print('iOS Local Notification (deprecated): $title, $body, $payload');
    },
  );
  final InitializationSettings initializationSettings = InitializationSettings(
    android: const AndroidInitializationSettings('@mipmap/ic_launcher'),
    iOS: initializationSettingsDarwin,
  );
  await flutterLocalNotificationsPlugin.initialize(
    initializationSettings,
    onDidReceiveNotificationResponse: (NotificationResponse response) async {
      print('Local Notification tapped: ${response.payload}');
      if (response.payload != null && response.payload!.isNotEmpty) {
        try {
          final Map<String, dynamic> data = jsonDecode(response.payload!);
          handleFCMNavigation(data);
        } catch (e) {
          print('Error decoding local notification payload: $e');
        }
      } else {
        print('Local Notification tapped with empty payload.');
      }
    },
  );

  // 5. Request notification permissions (important for iOS and Android 13+)
  FirebaseMessaging messaging = FirebaseMessaging.instance;
  NotificationSettings settings = await messaging.requestPermission(
    alert: true, announcement: false, badge: true, carPlay: false,
    criticalAlert: false, provisional: false, sound: true,
  );
  print('User granted notification permission: ${settings.authorizationStatus}');

  // 6. Get the FCM token and send it to your backend
  String? fcmToken = await messaging.getToken();
  print('FCM Token: $fcmToken');

  // Save FCM token if user is already logged in at app startup (for vet app)
  String? storedUserIdAtStartup = await TokenService.getUserId();
  if (fcmToken != null && storedUserIdAtStartup != null && storedUserIdAtStartup.isNotEmpty) {
    await FcmTokenApiService.saveUserFcmToken(storedUserIdAtStartup, fcmToken, 'vet');
    print('[Vet App main.dart] FCM token sent to backend for already logged-in vet $storedUserIdAtStartup on startup.');
  } else {
    print('[Vet App main.dart] FCM token not sent on startup (not logged in or token/userId missing for vet app).');
  }

  // 7. Handle messages when the app is in the foreground
  FirebaseMessaging.onMessage.listen((RemoteMessage message) {
    print('[FCM Foreground] Got a message whilst in the foreground!');
    print('[FCM Foreground] Data: ${message.data}');

    String? notificationTitle = message.notification?.title;
    String? notificationBody = message.notification?.body;

    // Manual fallback for title and body if 'notification' field is absent
    // This handles "data messages" which Firebase does not automatically display.
    // Prioritize data from 'notification' first, then from 'data' payload based on 'type'.
    if (notificationTitle == null || notificationBody == null) {
      if (message.data.containsKey('type')) {
        if (message.data['type'] == 'chat_message') {
          notificationTitle = message.data['sender_name'] ?? 'New Chat Message';
          notificationBody = message.data['message_content'] ?? 'You received a message.';
        } else if (message.data['type'] == 'incoming_call') {
          notificationTitle = 'Incoming Call';
          notificationBody = 'Call from ${message.data['caller_name'] ?? 'Unknown'}';
        }
        else {
          notificationTitle = 'New Notification';
          notificationBody = 'Tap to open.';
        }
      } else {
        notificationTitle = 'New Notification';
        notificationBody = 'Tap to open.';
      }
    }


    if (notificationTitle != null && notificationBody != null) {
      print('[FCM Foreground Display] Showing notification: Title=$notificationTitle, Body=$notificationBody');
      flutterLocalNotificationsPlugin.show(
        message.notification?.hashCode ?? message.hashCode,
        notificationTitle,
        notificationBody,
        NotificationDetails(
          android: AndroidNotificationDetails(
            'high_importance_channel',
            'High Importance Notifications',
            channelDescription: 'This channel is used for important notifications.',
            importance: Importance.max,
            priority: Priority.high,
            icon: '@mipmap/ic_launcher',
          ),
          iOS: const DarwinNotificationDetails(),
        ),
        payload: jsonEncode(message.data),
      );
    } else {
      print('[FCM Foreground Display] Could not determine title or body for local notification. Not showing.');
    }
  });

  // 8. Handle messages when the app is opened from a terminated state
  RemoteMessage? initialMessage = await FirebaseMessaging.instance.getInitialMessage();
  if (initialMessage != null) {
    print('[FCM Terminated] App opened from terminated state by a message!');
    print('[FCM Terminated] Initial message data: ${initialMessage.data}');
    handleFCMNavigation(initialMessage.data);
  }

  // 9. Handle messages when the app is in the background but not terminated (user taps notification)
  FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
    print('[FCM Opened App] App opened from background by tapping a message!');
    print('[FCM Opened App] Message data: ${message.data}');
    handleFCMNavigation(message.data);
  });
  // --- FCM INTEGRATION END ---

  // --- Existing Login Logic Below ---
  String? storedToken = await TokenService.getToken();
  String? storedUserId = await TokenService.getUserId();
  String? storedUsername = await TokenService.getUsername();

  final bool isLoggedIn = storedToken != null && storedUserId != null && storedUsername != null;
  print('[main.dart] User is logged in: $isLoggedIn');
  print('[main.dart] stored token: $storedToken');
  print('[main.dart] stored id: $storedUserId');
  print('[main.dart] stored username: $storedUsername');

  runApp(MyApp(
    isLoggedIn: isLoggedIn,
    initialToken: storedToken,
    initialUserId: storedUserId,
    initialUsername: storedUsername,
  ));
}

class MyApp extends StatelessWidget {
  final bool isLoggedIn;
  final String? initialToken;
  final String? initialUserId;
  final String? initialUsername;

  const MyApp({
    super.key,
    required this.isLoggedIn,
    this.initialToken,
    this.initialUserId,
    this.initialUsername,
  });

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      navigatorKey: navigatorKey,
      title: 'Veterinary Services : A Step Towards Digital Pet Healthcare. All rights reserved.',
      theme: ThemeData(
        primaryColor: kPrimaryGreen,
        colorScheme: ColorScheme.fromSeed(
          seedColor: kPrimaryGreen,
          primary: kPrimaryGreen,
          secondary: kAccentGreen,
          surface: Colors.white,
          onSurface: Colors.black87,
          background: Colors.grey.shade50,
        ),
        useMaterial3: true,
        scaffoldBackgroundColor: Colors.grey.shade50,
        appBarTheme: const AppBarTheme(
          backgroundColor: kPrimaryGreen,
          foregroundColor: Colors.white,
          elevation: 0,
          centerTitle: true,
        ),
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            backgroundColor: kPrimaryGreen,
            foregroundColor: Colors.white,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
            padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 14),
            textStyle: const TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.w600,
            ),
            elevation: 4,
          ),
        ),
        textButtonTheme: TextButtonThemeData(
          style: TextButton.styleFrom(
            foregroundColor: kPrimaryGreen,
          ),
        ),
        cardTheme: const CardThemeData(
          elevation: 6,
          shape: RoundedRectangleBorder(),
          color: Colors.white,
        ),
        inputDecorationTheme: InputDecorationTheme(
          labelStyle: const TextStyle(color: kPrimaryGreen),
          prefixIconColor: kAccentGreen,
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(10),
            borderSide: BorderSide(color: kPrimaryGreen.withOpacity(0.6)),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(10),
            borderSide: const BorderSide(color: kPrimaryGreen, width: 2),
          ),
          filled: true,
          fillColor: Colors.white,
        ),
        textTheme: const TextTheme(
          headlineLarge: TextStyle(color: Colors.black87),
          headlineMedium: TextStyle(color: Colors.black87),
          headlineSmall: TextStyle(color: Colors.black87),
          titleLarge: TextStyle(color: Colors.black87),
          titleMedium: TextStyle(color: Colors.black87),
          titleSmall: TextStyle(color: Colors.black87),
          bodyLarge: TextStyle(color: Colors.black87),
          bodyMedium: TextStyle(color: Colors.black87),
          bodySmall: TextStyle(color: Colors.black54),
          labelLarge: TextStyle(color: Colors.white),
          labelMedium: TextStyle(color: Colors.black87),
          labelSmall: TextStyle(color: Colors.black54),
        ).apply(
          bodyColor: Colors.black87,
          displayColor: Colors.black87,
        ),
      ),
      home: isLoggedIn
          ? AppWrapper(
        initialToken: initialToken!,
        initialUsername: initialUsername!,
        initialUserId: initialUserId!,
      )
          : MyHomePage(
        title: 'Veterinary Services : A Step Towards Digital Pet Healthcare. All rights reserved.',
        onLoginSuccessCallback: (token, userId, username) async {
          print('[main.dart] Login Success Callback - Received Token: $token, User ID: $userId, Username: $username');

          String? freshFcmToken = await FirebaseMessaging.instance.getToken();
          if (freshFcmToken != null && userId.isNotEmpty) {
            await FcmTokenApiService.saveUserFcmToken(userId, freshFcmToken, 'vet');
            print('FCM token sent to backend from vet app for user $userId.');
          } else {
            print('FCM token is null or userId is empty for vet app. Cannot send FCM token to backend.');
          }

          navigatorKey.currentState?.pushReplacement(
            MaterialPageRoute(
              builder: (context) => AppWrapper(
                initialToken: token,
                initialUsername: username,
                initialUserId: userId,
              ),
            ),
          );
        },
      ),
      routes: {
        '/login': (context) => const VetLoginPage(),
        '/register': (context) => const RegisterPage(),
      },
    );
  }
}

class AppWrapper extends StatefulWidget {
  final String initialToken;
  final String initialUsername;
  final String initialUserId;

  const AppWrapper({
    super.key,
    required this.initialToken,
    required this.initialUsername,
    required this.initialUserId,
  });

  @override
  State<AppWrapper> createState() => _AppWrapperState();
}

class _AppWrapperState extends State<AppWrapper> with WidgetsBindingObserver {
  StreamSubscription? _incomingCallSubscription;

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
    initSignalRAndListenGlobally(widget.initialToken);
  }

  void initSignalRAndListenGlobally(String token) async {
    print('[AppWrapper.initSignalRAndListenGlobally] Attempting to initialize SignalR.');
    if (token.isEmpty) {
      print('[AppWrapper.initSignalRAndListenGlobally] WARNING: Token is empty. Cannot initialize SignalRTCService.');
      return;
    }

    try {
      if (SignalRTCService.connection != null &&
          SignalRTCService.connection!.state == HubConnectionState.connected) {
        print('[AppWrapper.initSignalRAndListenGlobally] SignalRTCService already connected. State: ${SignalRTCService.connection?.state}. Skipping re-initialization.');
      } else {
        print('[AppWrapper.initSignalRAndListenGlobally] SignalRTCService not connected or null. Attempting init...');
        await SignalRTCService.init(token);
        print('[AppWrapper.initSignalRAndListenGlobally] SignalRTCService.init completed successfully.');
      }

      _incomingCallSubscription?.cancel();
      _incomingCallSubscription = SignalRTCService.incomingCallStream.listen(
            (callerId) {
          print('[AppWrapper.initSignalRAndListenGlobally] Incoming call detected from: $callerId');
          _navigateToIncomingCallScreen(callerId);
        },
        onError: (error) {
          print('[AppWrapper.initSignalRAndListenGlobally] Error on incomingCallStream: $error');
        },
        onDone: () {
          print('[AppWrapper.initSignalRAndListenGlobally] incomingCallStream done.');
        },
      );
      print('[AppWrapper.initSignalRAndListenGlobally] Incoming call stream listener set up.');
    } catch (e) {
      print('[AppWrapper.initSignalRAndListenGlobally] ERROR during SignalRTCService initialization or stream setup: $e');
    }
  }

  void _navigateToIncomingCallScreen(String callerId) {
    bool isIncomingCallScreenActive = false;
    navigatorKey.currentState?.popUntil((route) {
      if (route.settings.name == '/incoming_call_screen') {
        isIncomingCallScreenActive = true;
      }
      return true;
    });

    if (!isIncomingCallScreenActive && navigatorKey.currentState != null) {
      print('[AppWrapper._navigateToIncomingCallScreen] Pushing IncomingCallScreen for $callerId.');
      navigatorKey.currentState!.push(
        MaterialPageRoute(
          builder: (context) => IncomingCallScreen(
            callerId: callerId,
            callerName: callerId,
          ),
          settings: const RouteSettings(name: '/incoming_call_screen'),
        ),
      );
    } else {
      print('[AppWrapper._navigateToIncomingCallScreen] IncomingCallScreen is already active or navigator is null. Not pushing again.');
    }
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    print('[AppWrapper.didChangeAppLifecycleState] App lifecycle state changed to: $state');
    if (state == AppLifecycleState.resumed) {
      initSignalRAndListenGlobally(widget.initialToken);
    } else if (state == AppLifecycleState.paused || state == AppLifecycleState.inactive) {
      // SignalRTCService.disconnect();
    }
  }

  @override
  void dispose() {
    print('[AppWrapper] dispose: Cleaning up SignalR listener and connection.');
    WidgetsBinding.instance.removeObserver(this);
    _incomingCallSubscription?.cancel();
    SignalRTCService.disconnect();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return HomePage(
      username: widget.initialUsername,
      token: widget.initialToken,
    );
  }
}

class MyHomePage extends StatelessWidget {
  const MyHomePage({
    super.key,
    required this.title,
    this.onLoginSuccessCallback,
  });

  final String title;
  final Function(String token, String userId, String username)? onLoginSuccessCallback;

  @override
  Widget build(BuildContext context) {
    final TextTheme textTheme = Theme.of(context).textTheme;

    return Scaffold(
      appBar: AppBar(
        leading: null,
        automaticallyImplyLeading: false,
        title: Text(
          title,
          style: textTheme.titleLarge?.copyWith(
            color: Colors.white,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
      body: SingleChildScrollView(
        child: Column(
          children: [
            Container(
              decoration: BoxDecoration(
                color: kPrimaryGreen.withOpacity(0.15),
                borderRadius: const BorderRadius.only(
                  bottomLeft: Radius.circular(30),
                  bottomRight: Radius.circular(30),
                ),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.05),
                    blurRadius: 10,
                    offset: const Offset(0, 5),
                  ),
                ],
              ),
              width: double.infinity,
              padding: const EdgeInsets.symmetric(vertical: 40, horizontal: 30),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Icon(
                    Icons.pets_rounded,
                    size: 60,
                    color: kPrimaryGreen,
                  ),
                  const SizedBox(height: 20),
                  Text(
                    'Your Partner in Animal Healthcare.',
                    style: textTheme.headlineMedium?.copyWith(
                      fontWeight: FontWeight.bold,
                      color: kPrimaryGreen,
                    ),
                  ),
                  const SizedBox(height: 15),
                  Text(
                    'Dedicated to empowering veterinary professionals with the tools and resources they need to provide exceptional care.',
                    style: textTheme.bodyLarge?.copyWith(color: Colors.black87),
                  ),
                  const SizedBox(height: 25),
                  _buildServiceItem(
                    context,
                    Icons.people_alt_rounded,
                    'Connect with Clients',
                  ),
                  const SizedBox(height: 12),
                  _buildServiceItem(
                    context,
                    Icons.calendar_month_rounded,
                    'Appointments & Consultation',
                  ),
                  const SizedBox(height: 12),
                  _buildServiceItem(
                    context,
                    Icons.vaccines_rounded,
                    'Animal Doc & Vacc',
                  ),
                ],
              ),
            ),
            const SizedBox(height: 50),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 30.0),
              child: Column(
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Icon(
                        Icons.handshake_rounded,
                        size: 35,
                        color: kPrimaryGreen,
                      ),
                      const SizedBox(width: 15),
                      Text(
                        'Join Our Community',
                        style: textTheme.headlineSmall?.copyWith(
                          fontWeight: FontWeight.w600,
                          color: kPrimaryGreen,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 15),
                  Text(
                    'Login or register to unlock the full potential of our platform. Your journey to enhanced veterinary practice starts here!',
                    textAlign: TextAlign.center,
                    style: textTheme.bodyMedium?.copyWith(
                      color: Colors.black54,
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 40),
            ElevatedButton.icon(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => VetLoginPage(
                      onLoginSuccessCallback: (token, userId, username) {
                        onLoginSuccessCallback?.call(token, userId, username);
                      },
                    ),
                  ),
                );
              },
              icon: const Icon(Icons.person_rounded, color: Colors.white),
              label: const Text('Login Now'),
            ),
            const SizedBox(height: 20),
            ElevatedButton.icon(
              style: ElevatedButton.styleFrom(
                backgroundColor: kAccentGreen,
                elevation: 2,
              ),
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => const RegisterPage()),
                );
              },
              icon: const Icon(Icons.how_to_reg_rounded, color: Colors.white),
              label: const Text('Register Here'),
            ),
            const SizedBox(height: 60),
            Text(
              '© ${DateTime.now().year} Veterinary Services. All rights reserved.',
              style: textTheme.bodySmall?.copyWith(color: Colors.black45),
            ),
            const SizedBox(height: 20),
          ],
        ),
      ),
    );
  }

  Widget _buildServiceItem(BuildContext context, IconData icon, String text) {
    final TextTheme textTheme = Theme.of(context).textTheme;
    return Row(
      crossAxisAlignment: CrossAxisAlignment.center,
      children: [
        Icon(icon, color: kAccentGreen, size: 24),
        const SizedBox(width: 12),
        Expanded(
          child: Text(
            text,
            style: textTheme.bodyLarge?.copyWith(
              color: Colors.black87,
            ),
          ),
        ),
      ],
    );
  }
}